@using Silk.Web.Core;
@using Silk.Web.Core.Abstractions;
@model Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
@{
    var type = Model.GetHtmlInputType();
    var placeholder = (Model.Placeholder != null) ? $"placeholder=\"{Model.Placeholder}\"" : "";
    var typeAheadClass = "";
    var typeAheadData = "";
    if (Model.IsTypeAhead())
    {
        typeAheadClass = "typeahead";
        typeAheadData = $"data-typeahead-url=\"{Model.GetTypeAheadUrl(Url)}\"";
    }
    var errors = Model.GetErrors(ViewContext.ModelState);
    var errorClass = "";
    if (errors.Length > 0)
    {
        errorClass = "has-error";
    }
}
<div class="form-group @errorClass">
    <label for="@Model.PropertyName">@Model.GetDisplayName()</label>
    @if (Model.IsSelect())
    {
        <select class="form-control" name="@Model.PropertyName" id="@Model.PropertyName">

            @foreach (var selectItem in Model.GetSelectList(ViewData["model"], ViewData["modelMetadata"]))
            {
                <option value="@selectItem.Value">@selectItem.Text</option>
            }

        </select>
    }
    else
    {
        <input type="@type" value="@ViewData["value"]" class="form-control @typeAheadClass" name="@Model.PropertyName" id="@Model.PropertyName" @Html.Raw(placeholder) @Html.Raw(typeAheadData) />
    }
    @if (!string.IsNullOrEmpty(Model.Description))
    {
        <span class="help-block">@Model.Description</span>
    }
    @if (errors.Length > 0)
    {
        <span class="text-danger">
            @foreach (var error in errors)
            {
                @error<br />
            }
        </span>
    }
</div>